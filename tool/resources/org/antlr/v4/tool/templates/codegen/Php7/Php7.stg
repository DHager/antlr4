/*
 * [The "BSD license"]
 *  Copyright (c) 2012-2016 Terence Parr
 *  Copyright (c) 2012-2016 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

phpTypeInitMap ::= [
	"int":"0",
	"float":"0.0f",
	"string":"''",
	"bool":"false",
	default:"null" // anything other than a primitive type is an object
]

// args must be <object-model-object>, <fields-resulting-in-STs>

ParserFile(file, parser, namedActions, contextSuperClass) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage>;
<endif>
<namedActions.header>
use Antlr4\Parser;
<parser>
>>

ListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage>;
<endif>
<header>
use Antlr4\Tree\ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link <file.parserName>}.
 */
interface <file.grammarName>Listener extends ParseTreeListener {
	<file.listenerNames:{lname |
/**
<if(file.listenerLabelRuleNames.(lname))>
 * Enter a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.listenerLabelRuleNames.(lname)>\}.
<else>
 * Enter a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param <file.parserName>\\<lname; format="cap">Context $ctx The parse tree
 */
function enter<lname; format="cap">(<file.parserName>\\<lname; format="cap">Context $ctx);
/**
<if(file.listenerLabelRuleNames.(lname))>
 * Exit a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.listenerLabelRuleNames.(lname)>\}.
<else>
 * Exit a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param <file.parserName>\\<lname; format="cap">Context $ctx The parse tree
 */
function exit<lname; format="cap">(<file.parserName>\\<lname; format="cap">Context $ctx);}; separator="\n">
}
>>

BaseListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage>;
<endif>
<header>

use Antlr4\ParserRuleContext;
use Antlr4\Tree\ErrorNode;
use Antlr4\Tree\TerminalNode;

/**
 * This class provides an empty implementation of {@link <file.grammarName>Listener},
 * which can be extended to create a listener which only needs to handle a subset
 * of the available methods.
 */
class <file.grammarName>BaseListener implements <file.grammarName>Listener {
	<file.listenerNames:{lname |
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation does nothing.\</p>
 */
public function enter<lname; format="cap">(<file.parserName>\\<lname; format="cap">Context ctx) { \}
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation does nothing.\</p>
 */
public function exit<lname; format="cap">(<file.parserName>\\<lname; format="cap">Context ctx) { \}}; separator="\n">

	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function enterEveryRule(ParserRuleContext $ctx) { }
	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function exitEveryRule(ParserRuleContext ctx) { }
	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function visitTerminal(TerminalNode $node) { }
	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function visitErrorNode(ErrorNode $node) { }
}
>>

VisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage>;
<endif>
<header>
use Antlr4\Tree\ParseTreeVisitor;

/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by {@link <file.parserName>}.
 *
 * @param \<T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
interface <file.grammarName>Visitor\<T> extends ParseTreeVisitor\<T> {
	<file.visitorNames:{lname |
/**
<if(file.visitorLabelRuleNames.(lname))>
 * Visit a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.visitorLabelRuleNames.(lname)>\}.
<else>
 * Visit a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 * @return the visitor result
 */
T visit<lname; format="cap">(<file.parserName>\\<lname; format="cap">Context ctx);}; separator="\n">
}
>>

BaseVisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage>;
<endif>
<header>
use Antlr4\Tree\AbstractParseTreeVisitor;

/**
 * This class provides an empty implementation of {@link <file.grammarName>Visitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param \<T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
class <file.grammarName>BaseVisitor\<T> extends AbstractParseTreeVisitor\<T> implements <file.grammarName>Visitor\<T> {
	<file.visitorNames:{lname |
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation returns the result of calling
 * {@link #visitChildren\} on {@code ctx\}.\</p>
 */
public function visit<lname; format="cap">(<file.parserName>\\<lname; format="cap">Context ctx) { return visitChildren(ctx); \}}; separator="\n">
}
>>

fileHeader(grammarFileName, ANTLRVersion) ::= <<
\<?php
// Generated from <grammarFileName> by ANTLR <ANTLRVersion>
>>

Parser(parser, funcs, atn, sempredFuncs, superClass) ::= <<
<Parser_(ctor="parser_ctor", ...)>
>>

Parser_(parser, funcs, atn, sempredFuncs, ctor, superClass) ::= <<
class <parser.name> extends <superClass; null="Parser"> {

	/**
	 * @var DFA[]
	 */
	protected static $_decisionToDFA;

	/**
	 * @var PredictionContextCache
	 */
	protected static $_sharedContextCache = null;

	protected static function getSharedContextCache(){
		if(is_null(self::$_sharedContextCache)){
			self::$_sharedContextCache = new PredictionContextCache();
		}
		return self::$_sharedContextCache;
	}

	<if(parser.tokens)>
	/**
	 * @var int
	 */
	public static
		<parser.tokens:{k | $<k>=<parser.tokens.(k)>}; separator=", ", wrap, anchor>;
	<endif>
	/**
	 * @var int
	 */
	public static
		<parser.rules:{r | $RULE_<r.name> = <r.index>}; separator=", ", wrap, anchor>;
	/**
	 * @var string[]
	 */
	public static $ruleNames = [
		<parser.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	];

	<vocabulary(parser.literalNames, parser.symbolicNames)>

	public function getGrammarFileName() { return "<parser.grammarFileName>"; }

	public function getRuleNames() { return self::$ruleNames; }

	public function getSerializedATN() { return self::$_serializedATN; }

	public function getATN() {
	 	$this->prepATN();
		return self::$_ATN;
	}

	<namedActions.members>
	<parser:(ctor)()>
	<funcs; separator="\n">

<if(sempredFuncs)>
	public function sempred(RuleContext $_localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		<parser.sempredFuncs.values:{f|
case <f.ruleIndex>:
	return <f.name>_sempred((<f.ctxType>)$_localctx, predIndex);}; separator="\n">
		}
		return true;
	}
	<sempredFuncs.values; separator="\n">
<endif>

	<atn>
}
>>

vocabulary(literalNames, symbolicNames) ::= <<
/**
 * @var string[]
 */
private static $_LITERAL_NAMES = [
	<literalNames:{t | <t>}; null="null", separator=", ", wrap, anchor>
];
/**
 * @var string[]
 */
private static $_SYMBOLIC_NAMES = [
	<symbolicNames:{t | <t>}; null="null", separator=", ", wrap, anchor>
];
/**
 * @var Vocabulary
 */
private static $VOCABULARY = null;

public static function getVocabulary() {
	if(is_null(self::$VOCABULARY)){
		self::$VOCABULARY = new VocabularyImpl(self::$_LITERAL_NAMES, self::$_SYMBOLIC_NAMES);
	}
	return self::$VOCABULARY;
}
>>

dumpActions(recog, argFuncs, actionFuncs, sempredFuncs) ::= <<
<if(actionFuncs)>
public function action(RuleContext $_localctx, int ruleIndex, int actionIndex) {
	switch (ruleIndex) {
	<recog.actionFuncs.values:{f|
case <f.ruleIndex>:
	<f.name>_action((<f.ctxType>)$_localctx, actionIndex);
	break;}; separator="\n">
	}
}
<actionFuncs.values; separator="\n">
<endif>
<if(sempredFuncs)>
public function sempred(RuleContext $_localctx, int ruleIndex, int predIndex) {
	switch (ruleIndex) {
	<recog.sempredFuncs.values:{f|
case <f.ruleIndex>:
	return <f.name>_sempred((<f.ctxType>)$_localctx, predIndex);}; separator="\n">
	}
	return true;
}
<sempredFuncs.values; separator="\n">
<endif>
>>

parser_ctor(p) ::= <<
public function __construct(TokenStream $input) {
	parent::__construct($input);
	$this->_interp = new ParserATNSimulator(
		$this,
		$this->getATN(),
		self::$_decisionToDFA,
		self::getSharedContextCache()
	);
}
>>

/* This generates a private method since the actionIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleActionFunction(r, actions) ::= <<
private function <r.name>_action(<r.ctxType> $_localctx, int actionIndex) {
	switch (actionIndex) {
	<actions:{index|
case <index>:
	<actions.(index)>
	break;}; separator="\n">
	}
}
>>

/* This generates a private method since the predIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleSempredFunction(r, actions) ::= <<
private boolean <r.name>_sempred(<r.ctxType> $_localctx, int predIndex) {
	switch (predIndex) {
	<actions:{index|
case <index>:
	return <actions.(index)>;}; separator="\n">
	}
	return true;
}
>>

RuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,namedActions,finallyAction,postamble,exceptions) ::= <<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

/**
 * @return <currentRule.ctxType>
 * @throws RecognitionException
 */
<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>
public <endif> function <currentRule.name>(<args; separator=",">) {
	$_localctx = new <currentRule.ctxType>($_ctx, $this->getState()<currentRule.args:{a | , <a.name>}>);
	$this->enterRule($_localctx, <currentRule.startState>, RULE_<currentRule.name>);
	<namedActions.init>
	<locals; separator="\n">
	try {
<if(currentRule.hasLookaheadBlock)>
		/** @var int $_alt **/
		$_alt;
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	}
	<if(exceptions)>
	<exceptions; separator="\n">
	<else>
	catch (RecognitionException $re) {
		$_localctx->exception = $re;
		$this->_errHandler->reportError($this, $re);
		$this->_errHandler->recover($this, $re);
	}
	<endif>
	finally {
		<finallyAction>
		$this->exitRule();
	}
	return $_localctx;
}
>>

LeftRecursiveRuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,
	namedActions,finallyAction,postamble) ::=
<<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

/**
 * @throws RecognitionException
 */
<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>
public final<endif> function <currentRule.ctxType> <currentRule.name>(<args; separator=", ">) {
	return <currentRule.name>(0<currentRule.args:{a | , <a.name>}>);
}

/**
 * @param int $_p
 * @throws RecognitionException
 */
private function <currentRule.ctxType> <currentRule.name>($_p<args:{a | , <a>}>) {
	/** @var ParserRuleContext _parentctx */
	$_parentctx = _ctx;
	/** @var int $_parentState */
	$_parentState = getState();
	<currentRule.ctxType> $_localctx = new <currentRule.ctxType>($_ctx, $_parentState<currentRule.args:{a | , <a.name>}>);
	<currentRule.ctxType> $_prevctx = $_localctx;
	/** @var int $_startState */
	$_startState = <currentRule.startState>;
	enterRecursionRule($_localctx, <currentRule.startState>, RULE_<currentRule.name>, $_p);
	<namedActions.init>
	<locals; separator="\n">
	try {
<if(currentRule.hasLookaheadBlock)>
		int _alt;
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	}
	catch (RecognitionException re) {
		$_localctx.exception = re;
		_errHandler.reportError($this, re);
		_errHandler.recover($this, re);
	}
	finally {
		<finallyAction>
		unrollRecursionContexts($_parentctx);
	}
	return $_localctx;
}
>>

CodeBlockForOuterMostAlt(currentOuterMostAltCodeBlock, locals, preamble, ops) ::= <<
<if(currentOuterMostAltCodeBlock.altLabel)>$_localctx = new <currentOuterMostAltCodeBlock.altLabel; format="cap">Context($_localctx);<endif>
$this->enterOuterAlt($_localctx, <currentOuterMostAltCodeBlock.alt.altNum>);
<CodeBlockForAlt(currentAltCodeBlock=currentOuterMostAltCodeBlock, ...)>
>>

CodeBlockForAlt(currentAltCodeBlock, locals, preamble, ops) ::= <<
{
<locals; separator="\n">
<preamble; separator="\n">
<ops; separator="\n">
}
>>

LL1AltBlock(choice, preamble, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<if(choice.label)><labelref(choice.label)> = _input.LT(1);<endif>
<preamble; separator="\n">
$this->switch ($this->_input->LA(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
default:
	<error>
}
>>

LL1OptionalBlock(choice, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
switch ($this->_input->LA(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
default:
	break;
}
>>

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble, error, followExpr) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<preamble; separator="\n">
if (<expr>) {
	<alts; separator="\n">
}
<!else if ( !(<followExpr>) ) <error>!>
>>

LL1StarBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<preamble; separator="\n">
while (<loopExpr>) {
	<alts; separator="\n">
	$this->setState(<choice.loopBackStateNumber>);
	$this->_errHandler->sync($this);
	<iteration>
}
>>

LL1PlusBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
$this->setState(<choice.blockStartStateNumber>); <! alt block decision !>
$this->_errHandler->sync($this);
<preamble; separator="\n">
do {
	<alts; separator="\n">
	$this->setState(<choice.stateNumber>); <! loopback/exit decision !>
	$this->_errHandler->sync($this);
	<iteration>
} while ( <loopExpr> );
>>

// LL(*) stuff

AltBlock(choice, preamble, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<if(choice.label)><labelref(choice.label)> = $this->_input->LT(1);<endif>
<preamble; separator="\n">
switch ( $this->getInterpreter()->adaptivePredict($this->_input,<choice.decision>,$this->_ctx) ) {
<alts:{alt |
case <i>:
	<alt>
	break;}; separator="\n">
}
>>

OptionalBlock(choice, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
switch ( $this->getInterpreter()$this->adaptivePredict($this->_input,<choice.decision>,$this->_ctx) ) {
<alts:{alt |
case <i><if(!choice.ast.greedy)>+1<endif>:
	<alt>
	break;}; separator="\n">
}
>>

StarBlock(choice, alts, sync, iteration) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
$_alt = $this->getInterpreter()->adaptivePredict($this->_input,<choice.decision>,$this->_ctx);
while ( $_alt!=<choice.exitAlt> && $_alt!= ATN::INVALID_ALT_NUMBER ) {
	if ( $_alt==1<if(!choice.ast.greedy)>+1<endif> ) {
		<iteration>
		<alts> <! should only be one !>
	}
	$this->setState(<choice.loopBackStateNumber>);
	$this->_errHandler->sync($this);
	$_alt = $this->getInterpreter()->adaptivePredict($this->_input,<choice.decision>,$this->_ctx);
}
>>

PlusBlock(choice, alts, error) ::= <<
$this->setState(<choice.blockStartStateNumber>); <! alt block decision !>
$this->_errHandler->sync($this);
$_alt = 1<if(!choice.ast.greedy)>+1<endif>;
do {
	switch ($_alt) {
	<alts:{alt|
case <i><if(!choice.ast.greedy)>+1<endif>:
	<alt>
	break;}; separator="\n">
	default:
		<error>
	}
	$this->setState(<choice.loopBackStateNumber>); <! loopback/exit decision !>
	$this->_errHandler->sync($this);
	$_alt = $this->getInterpreter()->adaptivePredict($this->_input,<choice.decision>,$this->_ctx);
} while ( $_alt!=<choice.exitAlt> && $_alt!=ATN::INVALID_ALT_NUMBER );
>>

Sync(s) ::= "sync(<s.expecting.name>);"

ThrowNoViableAlt(t) ::= "throw new NoViableAltException($this);"

TestSetInline(s) ::= <<
<s.bitsets:{bits | <if(rest(rest(bits.ttypes)))><bitsetBitfieldComparison(s, bits)><else><bitsetInlineComparison(s, bits)><endif>}; separator=" || ">
>>

// Java language spec 15.19 - shift operators mask operands rather than overflow to 0... need range test
testShiftInRange(shiftAmount) ::= <<
((<shiftAmount>) & ~0x3f) == 0
>>

// produces smaller bytecode only when bits.ttypes contains more than two items
bitsetBitfieldComparison(s, bits) ::= <%
(<testShiftInRange({<offsetShift(s.varName, bits.shift)>})> && ((1L \<\< <offsetShift(s.varName, bits.shift)>) & (<bits.ttypes:{ttype | (1L \<\< <offsetShift(ttype, bits.shift)>)}; separator=" | ">)) != 0)
%>

isZero ::= [
"0":true,
default:false
]

offsetShift(shiftAmount, offset) ::= <%
<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>
%>

// produces more efficient bytecode when bits.ttypes contains at most two items
bitsetInlineComparison(s, bits) ::= <%
<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=" || ">
%>

cases(ttypes) ::= <<
<ttypes:{t | case <t>:}; separator="\n">
>>

InvokeRule(r, argExprsChunks) ::= <<
$this->setState(<r.stateNumber>);
<if(r.labels)><r.labels:{l | <labelref(l)> = }><endif><r.name>(<if(r.ast.options.p)><r.ast.options.p><if(argExprsChunks)>,<endif><endif><argExprsChunks>);
>>

MatchToken(m) ::= <<
$this->setState(<m.stateNumber>);
<if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>$this->match(<m.name>);
>>

MatchSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, false)>"

MatchNotSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, true)>"

CommonSetStuff(m, expr, capture, invert) ::= <<
$this->setState(<m.stateNumber>);
<if(m.labels)><m.labels:{l | <labelref(l)> = }>$this->_input->LT(1);<endif>
<capture>
if ( <if(invert)><m.varName> \<= 0 || <else>!<endif>(<expr>) ) {
	<if(m.labels)><m.labels:{l | <labelref(l)> = (Token)}><endif>$this->_errHandler->recoverInline($this);
}
else {
	if ( $this->_input->LA(1)==Token::EOF ) $matchedEOF = true;
	$this->_errHandler->reportMatch($this);
	$this->consume();
}
>>

Wildcard(w) ::= <<
$this->setState(<w.stateNumber>);
<if(w.labels)><w.labels:{l | <labelref(l)> = }><endif>$this->matchWildcard();
>>

// ACTION STUFF

Action(a, foo, chunks) ::= "<chunks>"

ArgAction(a, chunks) ::= "<chunks>"

SemPred(p, chunks, failChunks) ::= <<
$this->setState(<p.stateNumber>);
if (!(<chunks>)) throw new FailedPredicateException($this, <p.predicate><if(failChunks)>, <failChunks><elseif(p.msg)>, <p.msg><endif>);
>>

ExceptionClause(e, catchArg, catchAction) ::= <<
catch (<catchArg>) {
	<catchAction>
}
>>

// lexer actions are not associated with model objects

LexerSkipCommand()  ::= "$this->skip();"
LexerMoreCommand()  ::= "$this->more();"
LexerPopModeCommand() ::= "$this->popMode();"

LexerTypeCommand(arg, grammar)      ::= "$this->_type = <arg>;"
LexerChannelCommand(arg, grammar)   ::= "$this->_channel = <arg>;"
LexerModeCommand(arg, grammar)      ::= "$this->_mode = <arg>;"
LexerPushModeCommand(arg, grammar)  ::= "$this->pushMode(<arg>);"

ActionText(t) ::= "<t.text>"
ActionTemplate(t) ::= "<t.st>"
ArgRef(a) ::= "$_localctx.<a.name>"
LocalRef(a) ::= "$_localctx.<a.name>"
RetValueRef(a) ::= "$_localctx.<a.name>"
QRetValueRef(a) ::= "<ctx(a)>.<a.dict>.<a.name>"
/** How to translate $tokenLabel */
TokenRef(t) ::= "<ctx(t)>.<t.name>"
LabelRef(t) ::= "<ctx(t)>.<t.name>"
ListLabelRef(t) ::= "<ctx(t)>.<ListLabelName(t.name)>"
SetAttr(s,rhsChunks) ::= "<ctx(s)>.<s.name> = <rhsChunks>;"

TokenLabelType() ::= "<file.TokenLabelType; null={Token}>"
InputSymbolType() ::= "<file.InputSymbolType; null={Token}>"

TokenPropertyRef_text(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.getText():null)"
TokenPropertyRef_type(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.getType():0)"
TokenPropertyRef_line(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.getLine():0)"
TokenPropertyRef_pos(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.getCharPositionInLine():0)"
TokenPropertyRef_channel(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.getChannel():0)"
TokenPropertyRef_index(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.getTokenIndex():0)"
TokenPropertyRef_int(t) ::= "(<ctx(t)>.<t.label>!=null?Integer.valueOf(<ctx(t)>.<t.label>.getText()):0)"

RulePropertyRef_start(r) ::= "(<ctx(r)>.<r.label>!=null?(<ctx(r)>.<r.label>.start):null)"
RulePropertyRef_stop(r)	 ::= "(<ctx(r)>.<r.label>!=null?(<ctx(r)>.<r.label>.stop):null)"
RulePropertyRef_text(r)	 ::= "(<ctx(r)>.<r.label>!=null?_input.getText(<ctx(r)>.<r.label>.start,<ctx(r)>.<r.label>.stop):null)"
RulePropertyRef_ctx(r)	 ::= "<ctx(r)>.<r.label>"
RulePropertyRef_parser(r)	 ::= "$this"

ThisRulePropertyRef_start(r) ::= "$_localctx.start"
ThisRulePropertyRef_stop(r)	 ::= "$_localctx.stop"
ThisRulePropertyRef_text(r)	 ::= "_input.getText($_localctx.start, _input.LT(-1))"
ThisRulePropertyRef_ctx(r)	 ::= "$_localctx"
ThisRulePropertyRef_parser(r)	 ::= "$this"

NonLocalAttrRef(s)		 ::= "((<s.ruleName; format=\"cap\">Context)getInvokingContext(<s.ruleIndex>)).<s.name>"
SetNonLocalAttr(s, rhsChunks)	  ::=
	"((<s.ruleName; format=\"cap\">Context)getInvokingContext(<s.ruleIndex>)).<s.name> = <rhsChunks>;"

AddToLabelList(a) ::= "<ctx(a.label)>-><a.listName>->add(<labelref(a.label)>);"

TokenDecl(t) ::= "<TokenLabelType()> <t.name>"
TokenTypeDecl(t) ::= "int <t.name>;"
TokenListDecl(t) ::= "List\<Token> <t.name> = new ArrayList\<Token>()"
RuleContextDecl(r) ::= "<r.ctxName> <r.name>"
RuleContextListDecl(rdecl) ::= "List\<<rdecl.ctxName>> <rdecl.name> = new ArrayList\<<rdecl.ctxName>>()"

ContextTokenGetterDecl(t)      ::= <<
    /**
     * @return TerminalNode
     */
    public function <t.name>() { return $this->getToken(<parser.name>.<t.name>, 0); }
>>
ContextTokenListGetterDecl(t)  ::= <<
    /**
	 * @return TerminalNode[]
	 */
    public function <t.name>() { return $this->getTokens(<parser.name>.<t.name>); }
>>
ContextTokenListIndexedGetterDecl(t)  ::= <<
/**
 * @return TerminalNode
 */
public function <t.name>(int i) {
	return $this->getToken(<parser.name>.<t.name>, i);
}
>>
ContextRuleGetterDecl(r)       ::= <<
public function <r.ctxName> <r.name>() {
	return getRuleContext(<r.ctxName>::class,0);
}
>>
ContextRuleListGetterDecl(r)   ::= <<
/**
 * @return <r.ctxName>[]
 */
public function <r.name>() {
	return $this->getRuleContexts(<r.ctxName>::class);
}
>>
ContextRuleListIndexedGetterDecl(r)   ::= <<
/**
 * @param int $i
 * @return <r.ctxName>
 */
public function <r.name>($i) {
	return $this->getRuleContext(<r.ctxName>::class,i);
}
>>

LexerRuleContext() ::= "RuleContext"

/** The rule context name is the rule followed by a suffix; e.g.,
 *	r becomes rContext.
 */
RuleContextNameSuffix() ::= "Context"

ImplicitTokenLabel(tokenName) ::= "<tokenName>"
ImplicitRuleLabel(ruleName)	  ::= "<ruleName>"
ImplicitSetLabel(id)		  ::= "_tset<id>"
ListLabelName(label)		  ::= "<label>"

CaptureNextToken(d) ::= "<d.varName> = $_input->LT(1);"
CaptureNextTokenType(d) ::= "<d.varName> = $_input->LA(1);"

StructDecl(struct,ctorAttrs,attrs,getters,dispatchMethods,interfaces,extensionMembers)
	::= <<

//TODO namespace
class <struct.name> extends <if(contextSuperClass)><contextSuperClass><else>ParserRuleContext<endif><if(interfaces)> implements <interfaces; separator=", "><endif> {
    <attrs:{a | public <a>;}; separator="\n">
    <getters:{g | <g>}; separator="\n">
    <if(ctorAttrs)>
    /**
     * @param ParserRuleContext $parent
     * @param int $invokingState
     */
    public function __construct(ParserRuleContext $parent, $invokingState) {
        parent::__construct($parent, $invokingState);
    }
    <endif>
    /**
     * @param ParserRuleContext $parent
     * @param int $invokingState
     */
    public function __construct(ParserRuleContext $parent, $invokingState<ctorAttrs:{a | , <a>}>) {
        parent::__construct($parent, $invokingState);
        <struct.ctorAttrs:{a | $this-><a.name> = <a.name>;}; separator="\n">
    }
    public function getRuleIndex() { return RULE_<struct.derivedFromName>; }
    <if(struct.provideCopyFrom)> <! don't need copy unless we have subclasses !>
    public function __construct() { }
    /**
     * @param <struct.name> $ctx
     */
    public function copyFrom($ctx) {
        parent::copyFrom(ctx);
        <struct.attrs:{a | $this-><a.name> = ctx.<a.name>;}; separator="\n">
    }
    <endif>
    <dispatchMethods; separator="\n">
    <extensionMembers; separator="\n">
}

>>

AltLabelStructDecl(struct,attrs,getters,dispatchMethods) ::= <<
//TODO namespace
class <struct.name> extends <currentRule.name; format="cap">Context {
    <attrs:{a | public <a>;}; separator="\n">
    <getters:{g | <g>}; separator="\n">
    /**
     * @param <currentRule.name; format="cap">Context $ctx
     */
    public __construct($ctx) { $this->copyFrom(ctx); }
    <dispatchMethods; separator="\n">
}
>>

ListenerDispatchMethod(method) ::= <<
/**
 * @param ParseTreeListener $listener
 */
public function <if(method.isEnter)>enter<else>exit<endif>Rule(ParseTreeListener $listener) {
	if ( $listener instanceof <parser.grammarName>Listener ) {
		$listener-><if(method.isEnter)>enter<else>exit<endif><struct.derivedFromName; format="cap">($this);
	}
}
>>

VisitorDispatchMethod(method) ::= <<
/**
 * @param ParseTreeVisitor $visitor
 * @todo return-value and input type since PHP doesn't have generics
 */
public function accept(ParseTreeVisitor $visitor) {
	if ( $visitor instanceof <parser.grammarName>Visitor ) {
		return $visitor->visit<struct.derivedFromName; format="cap">($this);
	} else {
		return $visitor->visitChildren($this);
	}
}
>>

AttributeDecl(d) ::= "<d.type> <d.name><if(d.initValue)> = <d.initValue><endif>"

/** If we don't know location of label def x, use $this template */
labelref(x) ::= "<if(!x.isLocal)>((<x.ctx.name>)$_localctx).<endif><x.name>"

/** For any action chunk, what is correctly-typed context struct ptr? */
ctx(actionChunk) ::= "((<actionChunk.ctx.name>)$_localctx)"

// used for left-recursive rules
recRuleAltPredicate(ruleName,opPrec)  ::= "precpred(_ctx, <opPrec>)"
recRuleSetReturnAction(src,name)	  ::= "$<name>=$<src>.<name>;"
recRuleSetStopToken()                 ::= "_ctx.stop = _input.LT(-1);"

recRuleAltStartAction(ruleName, ctxName, label, isListLabel) ::= <<
$_localctx = new <ctxName>Context($_parentctx, $_parentState);
<if(label)>
<if(isListLabel)>
$_localctx.<label>.add($_prevctx);
<else>
$_localctx.<label> = $_prevctx;
<endif>
<endif>
<if(label)>$_localctx.<label> = $_prevctx;<endif>
pushNewRecursionContext($_localctx, $_startState, RULE_<ruleName>);
>>

recRuleLabeledAltStartAction(ruleName, currentAltLabel, label, isListLabel) ::= <<
$_localctx = new <currentAltLabel; format="cap">Context(new <ruleName; format="cap">Context($_parentctx, $_parentState));
<if(label)>
<if(isListLabel)>
((<currentAltLabel; format="cap">Context)$_localctx).<label>.add($_prevctx);
<else>
((<currentAltLabel; format="cap">Context)$_localctx).<label> = $_prevctx;
<endif>
<endif>
pushNewRecursionContext($_localctx, $_startState, RULE_<ruleName>);
>>

recRuleReplaceContext(ctxName) ::= <<
$_localctx = new <ctxName>Context($_localctx);
_ctx = $_localctx;
$_prevctx = $_localctx;
>>

recRuleSetPrevCtx() ::= <<
if ( _parseListeners!=null ) triggerExitRuleEvent();
$_prevctx = $_localctx;
>>


LexerFile(lexerFile, lexer, namedActions) ::= <<
<fileHeader(lexerFile.grammarFileName, lexerFile.ANTLRVersion)>
<if(lexerFile.genPackage)>
namespace <lexerFile.genPackage>;
<endif>
<namedActions.header>
use Antlr4\Lexer;
use Antlr4\CharStream;
use Antlr4\Token;
use Antlr4\TokenStream;
use Antlr4\VocabularyImpl;
use Antlr4\Atn\PredictionContextCache;
use Antlr4\Atn\ParserATNSimulator;
use Antlr4\Atn\ATN;
use Antlr4\Dfa\DFA;
use Antlr4\Misc\Utils;

<lexer>
>>

Lexer(lexer, atn, actionFuncs, sempredFuncs, superClass) ::= <<
class <lexer.name> extends <superClass; null="Lexer"> {

	/**
	 * @var DFA[]
	 */
	protected static $_decisionToDFA;

	/**
	 * @var PredictionContextCache
	 */
	protected static $_sharedContextCache = new PredictionContextCache();

	protected static function getSharedContextCache(){
		if(is_null(self::$_sharedContextCache)){
			self::$_sharedContextCache = new PredictionContextCache();
		}
		return self::$_sharedContextCache;
	}

	/**
	 * @var int
	 */
	public static
		<lexer.tokens:{k | $<k>=<lexer.tokens.(k)>}; separator=", ", wrap, anchor>;
	<if(lexer.channels)>
	/**
	 * @var int
	 */
	public static
		<lexer.channels:{c | $<c>=<lexer.channels.(c)>}; separator=", ", wrap, anchor>;
	<endif>
	<if(rest(lexer.modes))>
	/**
	 * @var int
	 */
	public static
		<rest(lexer.modes):{m | $<m>=<i>}; separator=", ", wrap, anchor>;
	<endif>
	/**
	 * @var string[]
	 */
	public static $channelNames = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"<if (lexer.channels)>, <lexer.channels:{c| "<c>"}; separator=", ", wrap, anchor><endif>
	];

	/**
	 * @var string[]
	 */
	public static $modeNames = [
		<lexer.modes:{m| "<m>"}; separator=", ", wrap, anchor>
	];

	/**
	 * @var string[]
	 */
	public static $ruleNames = [
		<lexer.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	];

	<vocabulary(lexer.literalNames, lexer.symbolicNames)>

	<namedActions.members>

	public function __construct(CharStream $input) {
			parent::__construct($input);
			$this->_interp = new LexerATNSimulator(
			$this,
			self::$_ATN,
			self::$_decisionToDFA,
			self::$_sharedContextCache
		);
	}

	public function getGrammarFileName() { return "<lexer.grammarFileName>"; }

	/**
	 * @return string[]
	 */
	public function getRuleNames() { return self::$ruleNames; }

	public function getSerializedATN() { return self::$_serializedATN; }

	public function getChannelNames() { return self::$channelNames; }

	public function getModeNames() { return self::$modeNames; }

	public function getATN() { return self::$_ATN; }

	<dumpActions(lexer, "", actionFuncs, sempredFuncs)>
	<atn>
}
>>

SerializedATN(model) ::= <<
<if(rest(model.segments))>
<! requires segmented representation !>
/**
 * @var int
 */
private static $_serializedATNSegments = <length(model.segments)>;
<model.segments:{segment|private static $_serializedATNSegment<i0> =
	"<segment; wrap={".<\n><\t>"}>";}; separator="\n">
/**
 * @var string
 */
public static $_serializedATN = Utils.join(
	new array(
		<model.segments:{segment | _serializedATNSegment<i0>}; separator=",\n">
	),
	""
);
<else>
<! only one segment, can be inlined !>
/**
 * @var string
 */
public static $_serializedATN =
	"<model.serialized; wrap={".<\n><\t>"}>";
<endif>
/**
 * @var ATN
 */
protected static $_ATN = null;

	protected function prepATN(){
		if(is_null(self::$_ATN)){
			self::$_ATN = (new ATNDeserializer())->deserialize($this->getSerializedATN()->toCharArray());
		}
	}

/* @TODO
static {
	_decisionToDFA = new DFA[_ATN->getNumberOfDecisions()];
	for ($i = 0; $i \< _ATN->getNumberOfDecisions(); $i++) {
		_decisionToDFA[$i] = new DFA(self::$_ATN->getDecisionState($i), $i);
	}
<!	org.antlr.v4.tool.DOTGenerator dot = new org.antlr.v4.tool.DOTGenerator(null);!>
<!	System.out.println(dot.getDOT(_ATN.decisionToState.get(0), ruleNames, false));!>
<!	System.out.println(dot.getDOT(_ATN.ruleToStartState[2], ruleNames, false));!>
}
*/
>>

/** Using a type to init value map, try to init a type; if not in table
 *	must be an object, default value is "null".
 */
initValue(typeName) ::= <<
<phpTypeInitMap.(typeName)>
>>

codeFileExtension() ::= ".php"
